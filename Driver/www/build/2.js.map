{"version":3,"sources":["../../src/pages/reset-password/reset-password.module.ts","../../src/validators/email.ts","../../src/pages/reset-password/reset-password.ts"],"names":[],"mappings":"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","file":"2.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ResetPasswordPage } from './reset-password';\r\n@NgModule({\r\n  declarations: [ResetPasswordPage],\r\n  imports: [IonicPageModule.forChild(ResetPasswordPage)],\r\n})\r\nexport class ResetPasswordPageModule { }\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { FormControl } from '@angular/forms';\n\nexport class EmailValidator {\n  \n  static isValid(control: FormControl){\n    const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/.test(control.value);\n    \n    if (re){\n      return null;\n    }\n    \n    return {\n      \"invalidEmail\": true\n    };\n    \n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { NavController, AlertController } from 'ionic-angular';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { AuthProvider } from '../../providers/auth/auth';\nimport { EmailValidator } from '../../validators/email';\nimport { LanguageProvider } from '../../providers/language/language';\nimport { IonicPage } from 'ionic-angular';\n@IonicPage()\n@Component({\n  selector: 'page-reset-password',\n  templateUrl: 'reset-password.html',\n})\nexport class ResetPasswordPage {\n  public resetPasswordForm: FormGroup;\n  \n  constructor(public navCtrl: NavController, public lp: LanguageProvider, public authProvider: AuthProvider, \n    public formBuilder: FormBuilder, public alertCtrl: AlertController) {\n      \n      this.resetPasswordForm = formBuilder.group({\n        email: ['', Validators.compose([Validators.required, EmailValidator.isValid])],\n      });\n  }\n\n  resetPassword(){\n    if (!this.resetPasswordForm.valid){\n      console.log(this.resetPasswordForm.value);\n    } else {\n      this.authProvider.resetPassword(this.resetPasswordForm.value.email)\n      .then((user) => {\n        let alert = this.alertCtrl.create({\n          message: this.lp.translate()[0].j10,\n          buttons: [\n            {\n              text: this.lp.translate()[0].i9,\n              role: 'cancel',\n              handler: () => { this.navCtrl.pop(); }\n            }\n          ]\n        });\n        alert.present();\n\n      }, (error) => {\n        var errorMessage: string = error.message;\n        let errorAlert = this.alertCtrl.create({\n          message: errorMessage,\n          buttons: [{ text: this.lp.translate()[0].i9, role: 'cancel' }]\n        });\n        errorAlert.present();\n      });\n    }\n  }\n\n\n  goToLogin(){\n    this.navCtrl.setRoot('LoginPage');\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts"],"sourceRoot":""}